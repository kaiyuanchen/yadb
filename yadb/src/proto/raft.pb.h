// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: raft.proto

#ifndef PROTOBUF_raft_2eproto__INCLUDED
#define PROTOBUF_raft_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace raft_proto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_raft_2eproto();
void protobuf_AssignDesc_raft_2eproto();
void protobuf_ShutdownFile_raft_2eproto();

class vote_request;
class vote_response;
class append_entry_requset;
class append_entry_requset_entry;
class append_entry_response;

enum vote_response_RESULT_TYPE {
  vote_response_RESULT_TYPE_OK = 0,
  vote_response_RESULT_TYPE_REJECT = 1
};
bool vote_response_RESULT_TYPE_IsValid(int value);
const vote_response_RESULT_TYPE vote_response_RESULT_TYPE_RESULT_TYPE_MIN = vote_response_RESULT_TYPE_OK;
const vote_response_RESULT_TYPE vote_response_RESULT_TYPE_RESULT_TYPE_MAX = vote_response_RESULT_TYPE_REJECT;
const int vote_response_RESULT_TYPE_RESULT_TYPE_ARRAYSIZE = vote_response_RESULT_TYPE_RESULT_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* vote_response_RESULT_TYPE_descriptor();
inline const ::std::string& vote_response_RESULT_TYPE_Name(vote_response_RESULT_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    vote_response_RESULT_TYPE_descriptor(), value);
}
inline bool vote_response_RESULT_TYPE_Parse(
    const ::std::string& name, vote_response_RESULT_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<vote_response_RESULT_TYPE>(
    vote_response_RESULT_TYPE_descriptor(), name, value);
}
enum append_entry_response_RESULT_TYPE {
  append_entry_response_RESULT_TYPE_OK = 0,
  append_entry_response_RESULT_TYPE_REJECT = 1
};
bool append_entry_response_RESULT_TYPE_IsValid(int value);
const append_entry_response_RESULT_TYPE append_entry_response_RESULT_TYPE_RESULT_TYPE_MIN = append_entry_response_RESULT_TYPE_OK;
const append_entry_response_RESULT_TYPE append_entry_response_RESULT_TYPE_RESULT_TYPE_MAX = append_entry_response_RESULT_TYPE_REJECT;
const int append_entry_response_RESULT_TYPE_RESULT_TYPE_ARRAYSIZE = append_entry_response_RESULT_TYPE_RESULT_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* append_entry_response_RESULT_TYPE_descriptor();
inline const ::std::string& append_entry_response_RESULT_TYPE_Name(append_entry_response_RESULT_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    append_entry_response_RESULT_TYPE_descriptor(), value);
}
inline bool append_entry_response_RESULT_TYPE_Parse(
    const ::std::string& name, append_entry_response_RESULT_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<append_entry_response_RESULT_TYPE>(
    append_entry_response_RESULT_TYPE_descriptor(), name, value);
}
// ===================================================================

class vote_request : public ::google::protobuf::Message {
 public:
  vote_request();
  virtual ~vote_request();

  vote_request(const vote_request& from);

  inline vote_request& operator=(const vote_request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const vote_request& default_instance();

  void Swap(vote_request* other);

  // implements Message ----------------------------------------------

  vote_request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const vote_request& from);
  void MergeFrom(const vote_request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 term = 1;
  inline bool has_term() const;
  inline void clear_term();
  static const int kTermFieldNumber = 1;
  inline ::google::protobuf::int32 term() const;
  inline void set_term(::google::protobuf::int32 value);

  // required int32 candidate_id = 2;
  inline bool has_candidate_id() const;
  inline void clear_candidate_id();
  static const int kCandidateIdFieldNumber = 2;
  inline ::google::protobuf::int32 candidate_id() const;
  inline void set_candidate_id(::google::protobuf::int32 value);

  // required int32 last_log_idx = 3;
  inline bool has_last_log_idx() const;
  inline void clear_last_log_idx();
  static const int kLastLogIdxFieldNumber = 3;
  inline ::google::protobuf::int32 last_log_idx() const;
  inline void set_last_log_idx(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:raft_proto.vote_request)
 private:
  inline void set_has_term();
  inline void clear_has_term();
  inline void set_has_candidate_id();
  inline void clear_has_candidate_id();
  inline void set_has_last_log_idx();
  inline void clear_has_last_log_idx();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 term_;
  ::google::protobuf::int32 candidate_id_;
  ::google::protobuf::int32 last_log_idx_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_raft_2eproto();
  friend void protobuf_AssignDesc_raft_2eproto();
  friend void protobuf_ShutdownFile_raft_2eproto();

  void InitAsDefaultInstance();
  static vote_request* default_instance_;
};
// -------------------------------------------------------------------

class vote_response : public ::google::protobuf::Message {
 public:
  vote_response();
  virtual ~vote_response();

  vote_response(const vote_response& from);

  inline vote_response& operator=(const vote_response& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const vote_response& default_instance();

  void Swap(vote_response* other);

  // implements Message ----------------------------------------------

  vote_response* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const vote_response& from);
  void MergeFrom(const vote_response& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef vote_response_RESULT_TYPE RESULT_TYPE;
  static const RESULT_TYPE OK = vote_response_RESULT_TYPE_OK;
  static const RESULT_TYPE REJECT = vote_response_RESULT_TYPE_REJECT;
  static inline bool RESULT_TYPE_IsValid(int value) {
    return vote_response_RESULT_TYPE_IsValid(value);
  }
  static const RESULT_TYPE RESULT_TYPE_MIN =
    vote_response_RESULT_TYPE_RESULT_TYPE_MIN;
  static const RESULT_TYPE RESULT_TYPE_MAX =
    vote_response_RESULT_TYPE_RESULT_TYPE_MAX;
  static const int RESULT_TYPE_ARRAYSIZE =
    vote_response_RESULT_TYPE_RESULT_TYPE_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  RESULT_TYPE_descriptor() {
    return vote_response_RESULT_TYPE_descriptor();
  }
  static inline const ::std::string& RESULT_TYPE_Name(RESULT_TYPE value) {
    return vote_response_RESULT_TYPE_Name(value);
  }
  static inline bool RESULT_TYPE_Parse(const ::std::string& name,
      RESULT_TYPE* value) {
    return vote_response_RESULT_TYPE_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required int32 term = 1;
  inline bool has_term() const;
  inline void clear_term();
  static const int kTermFieldNumber = 1;
  inline ::google::protobuf::int32 term() const;
  inline void set_term(::google::protobuf::int32 value);

  // required .raft_proto.vote_response.RESULT_TYPE result = 2 [default = REJECT];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::raft_proto::vote_response_RESULT_TYPE result() const;
  inline void set_result(::raft_proto::vote_response_RESULT_TYPE value);

  // @@protoc_insertion_point(class_scope:raft_proto.vote_response)
 private:
  inline void set_has_term();
  inline void clear_has_term();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 term_;
  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_raft_2eproto();
  friend void protobuf_AssignDesc_raft_2eproto();
  friend void protobuf_ShutdownFile_raft_2eproto();

  void InitAsDefaultInstance();
  static vote_response* default_instance_;
};
// -------------------------------------------------------------------

class append_entry_requset_entry : public ::google::protobuf::Message {
 public:
  append_entry_requset_entry();
  virtual ~append_entry_requset_entry();

  append_entry_requset_entry(const append_entry_requset_entry& from);

  inline append_entry_requset_entry& operator=(const append_entry_requset_entry& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const append_entry_requset_entry& default_instance();

  void Swap(append_entry_requset_entry* other);

  // implements Message ----------------------------------------------

  append_entry_requset_entry* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const append_entry_requset_entry& from);
  void MergeFrom(const append_entry_requset_entry& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 idx = 1;
  inline bool has_idx() const;
  inline void clear_idx();
  static const int kIdxFieldNumber = 1;
  inline ::google::protobuf::int32 idx() const;
  inline void set_idx(::google::protobuf::int32 value);

  // required string val = 2;
  inline bool has_val() const;
  inline void clear_val();
  static const int kValFieldNumber = 2;
  inline const ::std::string& val() const;
  inline void set_val(const ::std::string& value);
  inline void set_val(const char* value);
  inline void set_val(const char* value, size_t size);
  inline ::std::string* mutable_val();
  inline ::std::string* release_val();
  inline void set_allocated_val(::std::string* val);

  // @@protoc_insertion_point(class_scope:raft_proto.append_entry_requset.entry)
 private:
  inline void set_has_idx();
  inline void clear_has_idx();
  inline void set_has_val();
  inline void clear_has_val();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* val_;
  ::google::protobuf::int32 idx_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_raft_2eproto();
  friend void protobuf_AssignDesc_raft_2eproto();
  friend void protobuf_ShutdownFile_raft_2eproto();

  void InitAsDefaultInstance();
  static append_entry_requset_entry* default_instance_;
};
// -------------------------------------------------------------------

class append_entry_requset : public ::google::protobuf::Message {
 public:
  append_entry_requset();
  virtual ~append_entry_requset();

  append_entry_requset(const append_entry_requset& from);

  inline append_entry_requset& operator=(const append_entry_requset& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const append_entry_requset& default_instance();

  void Swap(append_entry_requset* other);

  // implements Message ----------------------------------------------

  append_entry_requset* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const append_entry_requset& from);
  void MergeFrom(const append_entry_requset& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef append_entry_requset_entry entry;

  // accessors -------------------------------------------------------

  // required int32 term = 1;
  inline bool has_term() const;
  inline void clear_term();
  static const int kTermFieldNumber = 1;
  inline ::google::protobuf::int32 term() const;
  inline void set_term(::google::protobuf::int32 value);

  // required int32 leader_id = 2;
  inline bool has_leader_id() const;
  inline void clear_leader_id();
  static const int kLeaderIdFieldNumber = 2;
  inline ::google::protobuf::int32 leader_id() const;
  inline void set_leader_id(::google::protobuf::int32 value);

  // optional int32 prev_log_idx = 3;
  inline bool has_prev_log_idx() const;
  inline void clear_prev_log_idx();
  static const int kPrevLogIdxFieldNumber = 3;
  inline ::google::protobuf::int32 prev_log_idx() const;
  inline void set_prev_log_idx(::google::protobuf::int32 value);

  // optional int32 prev_log_term = 4;
  inline bool has_prev_log_term() const;
  inline void clear_prev_log_term();
  static const int kPrevLogTermFieldNumber = 4;
  inline ::google::protobuf::int32 prev_log_term() const;
  inline void set_prev_log_term(::google::protobuf::int32 value);

  // optional int32 leader_cmt_idx = 5;
  inline bool has_leader_cmt_idx() const;
  inline void clear_leader_cmt_idx();
  static const int kLeaderCmtIdxFieldNumber = 5;
  inline ::google::protobuf::int32 leader_cmt_idx() const;
  inline void set_leader_cmt_idx(::google::protobuf::int32 value);

  // repeated .raft_proto.append_entry_requset.entry etriies = 6;
  inline int etriies_size() const;
  inline void clear_etriies();
  static const int kEtriiesFieldNumber = 6;
  inline const ::raft_proto::append_entry_requset_entry& etriies(int index) const;
  inline ::raft_proto::append_entry_requset_entry* mutable_etriies(int index);
  inline ::raft_proto::append_entry_requset_entry* add_etriies();
  inline const ::google::protobuf::RepeatedPtrField< ::raft_proto::append_entry_requset_entry >&
      etriies() const;
  inline ::google::protobuf::RepeatedPtrField< ::raft_proto::append_entry_requset_entry >*
      mutable_etriies();

  // @@protoc_insertion_point(class_scope:raft_proto.append_entry_requset)
 private:
  inline void set_has_term();
  inline void clear_has_term();
  inline void set_has_leader_id();
  inline void clear_has_leader_id();
  inline void set_has_prev_log_idx();
  inline void clear_has_prev_log_idx();
  inline void set_has_prev_log_term();
  inline void clear_has_prev_log_term();
  inline void set_has_leader_cmt_idx();
  inline void clear_has_leader_cmt_idx();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 term_;
  ::google::protobuf::int32 leader_id_;
  ::google::protobuf::int32 prev_log_idx_;
  ::google::protobuf::int32 prev_log_term_;
  ::google::protobuf::RepeatedPtrField< ::raft_proto::append_entry_requset_entry > etriies_;
  ::google::protobuf::int32 leader_cmt_idx_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_raft_2eproto();
  friend void protobuf_AssignDesc_raft_2eproto();
  friend void protobuf_ShutdownFile_raft_2eproto();

  void InitAsDefaultInstance();
  static append_entry_requset* default_instance_;
};
// -------------------------------------------------------------------

class append_entry_response : public ::google::protobuf::Message {
 public:
  append_entry_response();
  virtual ~append_entry_response();

  append_entry_response(const append_entry_response& from);

  inline append_entry_response& operator=(const append_entry_response& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const append_entry_response& default_instance();

  void Swap(append_entry_response* other);

  // implements Message ----------------------------------------------

  append_entry_response* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const append_entry_response& from);
  void MergeFrom(const append_entry_response& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef append_entry_response_RESULT_TYPE RESULT_TYPE;
  static const RESULT_TYPE OK = append_entry_response_RESULT_TYPE_OK;
  static const RESULT_TYPE REJECT = append_entry_response_RESULT_TYPE_REJECT;
  static inline bool RESULT_TYPE_IsValid(int value) {
    return append_entry_response_RESULT_TYPE_IsValid(value);
  }
  static const RESULT_TYPE RESULT_TYPE_MIN =
    append_entry_response_RESULT_TYPE_RESULT_TYPE_MIN;
  static const RESULT_TYPE RESULT_TYPE_MAX =
    append_entry_response_RESULT_TYPE_RESULT_TYPE_MAX;
  static const int RESULT_TYPE_ARRAYSIZE =
    append_entry_response_RESULT_TYPE_RESULT_TYPE_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  RESULT_TYPE_descriptor() {
    return append_entry_response_RESULT_TYPE_descriptor();
  }
  static inline const ::std::string& RESULT_TYPE_Name(RESULT_TYPE value) {
    return append_entry_response_RESULT_TYPE_Name(value);
  }
  static inline bool RESULT_TYPE_Parse(const ::std::string& name,
      RESULT_TYPE* value) {
    return append_entry_response_RESULT_TYPE_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required int32 term = 1;
  inline bool has_term() const;
  inline void clear_term();
  static const int kTermFieldNumber = 1;
  inline ::google::protobuf::int32 term() const;
  inline void set_term(::google::protobuf::int32 value);

  // required .raft_proto.append_entry_response.RESULT_TYPE result = 2 [default = REJECT];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::raft_proto::append_entry_response_RESULT_TYPE result() const;
  inline void set_result(::raft_proto::append_entry_response_RESULT_TYPE value);

  // optional int32 prev_log_idx = 3;
  inline bool has_prev_log_idx() const;
  inline void clear_prev_log_idx();
  static const int kPrevLogIdxFieldNumber = 3;
  inline ::google::protobuf::int32 prev_log_idx() const;
  inline void set_prev_log_idx(::google::protobuf::int32 value);

  // optional int32 append_size = 4 [default = 0];
  inline bool has_append_size() const;
  inline void clear_append_size();
  static const int kAppendSizeFieldNumber = 4;
  inline ::google::protobuf::int32 append_size() const;
  inline void set_append_size(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:raft_proto.append_entry_response)
 private:
  inline void set_has_term();
  inline void clear_has_term();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_prev_log_idx();
  inline void clear_has_prev_log_idx();
  inline void set_has_append_size();
  inline void clear_has_append_size();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 term_;
  int result_;
  ::google::protobuf::int32 prev_log_idx_;
  ::google::protobuf::int32 append_size_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_raft_2eproto();
  friend void protobuf_AssignDesc_raft_2eproto();
  friend void protobuf_ShutdownFile_raft_2eproto();

  void InitAsDefaultInstance();
  static append_entry_response* default_instance_;
};
// ===================================================================


// ===================================================================

// vote_request

// required int32 term = 1;
inline bool vote_request::has_term() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void vote_request::set_has_term() {
  _has_bits_[0] |= 0x00000001u;
}
inline void vote_request::clear_has_term() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void vote_request::clear_term() {
  term_ = 0;
  clear_has_term();
}
inline ::google::protobuf::int32 vote_request::term() const {
  return term_;
}
inline void vote_request::set_term(::google::protobuf::int32 value) {
  set_has_term();
  term_ = value;
}

// required int32 candidate_id = 2;
inline bool vote_request::has_candidate_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void vote_request::set_has_candidate_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void vote_request::clear_has_candidate_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void vote_request::clear_candidate_id() {
  candidate_id_ = 0;
  clear_has_candidate_id();
}
inline ::google::protobuf::int32 vote_request::candidate_id() const {
  return candidate_id_;
}
inline void vote_request::set_candidate_id(::google::protobuf::int32 value) {
  set_has_candidate_id();
  candidate_id_ = value;
}

// required int32 last_log_idx = 3;
inline bool vote_request::has_last_log_idx() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void vote_request::set_has_last_log_idx() {
  _has_bits_[0] |= 0x00000004u;
}
inline void vote_request::clear_has_last_log_idx() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void vote_request::clear_last_log_idx() {
  last_log_idx_ = 0;
  clear_has_last_log_idx();
}
inline ::google::protobuf::int32 vote_request::last_log_idx() const {
  return last_log_idx_;
}
inline void vote_request::set_last_log_idx(::google::protobuf::int32 value) {
  set_has_last_log_idx();
  last_log_idx_ = value;
}

// -------------------------------------------------------------------

// vote_response

// required int32 term = 1;
inline bool vote_response::has_term() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void vote_response::set_has_term() {
  _has_bits_[0] |= 0x00000001u;
}
inline void vote_response::clear_has_term() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void vote_response::clear_term() {
  term_ = 0;
  clear_has_term();
}
inline ::google::protobuf::int32 vote_response::term() const {
  return term_;
}
inline void vote_response::set_term(::google::protobuf::int32 value) {
  set_has_term();
  term_ = value;
}

// required .raft_proto.vote_response.RESULT_TYPE result = 2 [default = REJECT];
inline bool vote_response::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void vote_response::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void vote_response::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void vote_response::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::raft_proto::vote_response_RESULT_TYPE vote_response::result() const {
  return static_cast< ::raft_proto::vote_response_RESULT_TYPE >(result_);
}
inline void vote_response::set_result(::raft_proto::vote_response_RESULT_TYPE value) {
  assert(::raft_proto::vote_response_RESULT_TYPE_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// append_entry_requset_entry

// required int32 idx = 1;
inline bool append_entry_requset_entry::has_idx() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void append_entry_requset_entry::set_has_idx() {
  _has_bits_[0] |= 0x00000001u;
}
inline void append_entry_requset_entry::clear_has_idx() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void append_entry_requset_entry::clear_idx() {
  idx_ = 0;
  clear_has_idx();
}
inline ::google::protobuf::int32 append_entry_requset_entry::idx() const {
  return idx_;
}
inline void append_entry_requset_entry::set_idx(::google::protobuf::int32 value) {
  set_has_idx();
  idx_ = value;
}

// required string val = 2;
inline bool append_entry_requset_entry::has_val() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void append_entry_requset_entry::set_has_val() {
  _has_bits_[0] |= 0x00000002u;
}
inline void append_entry_requset_entry::clear_has_val() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void append_entry_requset_entry::clear_val() {
  if (val_ != &::google::protobuf::internal::kEmptyString) {
    val_->clear();
  }
  clear_has_val();
}
inline const ::std::string& append_entry_requset_entry::val() const {
  return *val_;
}
inline void append_entry_requset_entry::set_val(const ::std::string& value) {
  set_has_val();
  if (val_ == &::google::protobuf::internal::kEmptyString) {
    val_ = new ::std::string;
  }
  val_->assign(value);
}
inline void append_entry_requset_entry::set_val(const char* value) {
  set_has_val();
  if (val_ == &::google::protobuf::internal::kEmptyString) {
    val_ = new ::std::string;
  }
  val_->assign(value);
}
inline void append_entry_requset_entry::set_val(const char* value, size_t size) {
  set_has_val();
  if (val_ == &::google::protobuf::internal::kEmptyString) {
    val_ = new ::std::string;
  }
  val_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* append_entry_requset_entry::mutable_val() {
  set_has_val();
  if (val_ == &::google::protobuf::internal::kEmptyString) {
    val_ = new ::std::string;
  }
  return val_;
}
inline ::std::string* append_entry_requset_entry::release_val() {
  clear_has_val();
  if (val_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = val_;
    val_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void append_entry_requset_entry::set_allocated_val(::std::string* val) {
  if (val_ != &::google::protobuf::internal::kEmptyString) {
    delete val_;
  }
  if (val) {
    set_has_val();
    val_ = val;
  } else {
    clear_has_val();
    val_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// append_entry_requset

// required int32 term = 1;
inline bool append_entry_requset::has_term() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void append_entry_requset::set_has_term() {
  _has_bits_[0] |= 0x00000001u;
}
inline void append_entry_requset::clear_has_term() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void append_entry_requset::clear_term() {
  term_ = 0;
  clear_has_term();
}
inline ::google::protobuf::int32 append_entry_requset::term() const {
  return term_;
}
inline void append_entry_requset::set_term(::google::protobuf::int32 value) {
  set_has_term();
  term_ = value;
}

// required int32 leader_id = 2;
inline bool append_entry_requset::has_leader_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void append_entry_requset::set_has_leader_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void append_entry_requset::clear_has_leader_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void append_entry_requset::clear_leader_id() {
  leader_id_ = 0;
  clear_has_leader_id();
}
inline ::google::protobuf::int32 append_entry_requset::leader_id() const {
  return leader_id_;
}
inline void append_entry_requset::set_leader_id(::google::protobuf::int32 value) {
  set_has_leader_id();
  leader_id_ = value;
}

// optional int32 prev_log_idx = 3;
inline bool append_entry_requset::has_prev_log_idx() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void append_entry_requset::set_has_prev_log_idx() {
  _has_bits_[0] |= 0x00000004u;
}
inline void append_entry_requset::clear_has_prev_log_idx() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void append_entry_requset::clear_prev_log_idx() {
  prev_log_idx_ = 0;
  clear_has_prev_log_idx();
}
inline ::google::protobuf::int32 append_entry_requset::prev_log_idx() const {
  return prev_log_idx_;
}
inline void append_entry_requset::set_prev_log_idx(::google::protobuf::int32 value) {
  set_has_prev_log_idx();
  prev_log_idx_ = value;
}

// optional int32 prev_log_term = 4;
inline bool append_entry_requset::has_prev_log_term() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void append_entry_requset::set_has_prev_log_term() {
  _has_bits_[0] |= 0x00000008u;
}
inline void append_entry_requset::clear_has_prev_log_term() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void append_entry_requset::clear_prev_log_term() {
  prev_log_term_ = 0;
  clear_has_prev_log_term();
}
inline ::google::protobuf::int32 append_entry_requset::prev_log_term() const {
  return prev_log_term_;
}
inline void append_entry_requset::set_prev_log_term(::google::protobuf::int32 value) {
  set_has_prev_log_term();
  prev_log_term_ = value;
}

// optional int32 leader_cmt_idx = 5;
inline bool append_entry_requset::has_leader_cmt_idx() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void append_entry_requset::set_has_leader_cmt_idx() {
  _has_bits_[0] |= 0x00000010u;
}
inline void append_entry_requset::clear_has_leader_cmt_idx() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void append_entry_requset::clear_leader_cmt_idx() {
  leader_cmt_idx_ = 0;
  clear_has_leader_cmt_idx();
}
inline ::google::protobuf::int32 append_entry_requset::leader_cmt_idx() const {
  return leader_cmt_idx_;
}
inline void append_entry_requset::set_leader_cmt_idx(::google::protobuf::int32 value) {
  set_has_leader_cmt_idx();
  leader_cmt_idx_ = value;
}

// repeated .raft_proto.append_entry_requset.entry etriies = 6;
inline int append_entry_requset::etriies_size() const {
  return etriies_.size();
}
inline void append_entry_requset::clear_etriies() {
  etriies_.Clear();
}
inline const ::raft_proto::append_entry_requset_entry& append_entry_requset::etriies(int index) const {
  return etriies_.Get(index);
}
inline ::raft_proto::append_entry_requset_entry* append_entry_requset::mutable_etriies(int index) {
  return etriies_.Mutable(index);
}
inline ::raft_proto::append_entry_requset_entry* append_entry_requset::add_etriies() {
  return etriies_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::raft_proto::append_entry_requset_entry >&
append_entry_requset::etriies() const {
  return etriies_;
}
inline ::google::protobuf::RepeatedPtrField< ::raft_proto::append_entry_requset_entry >*
append_entry_requset::mutable_etriies() {
  return &etriies_;
}

// -------------------------------------------------------------------

// append_entry_response

// required int32 term = 1;
inline bool append_entry_response::has_term() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void append_entry_response::set_has_term() {
  _has_bits_[0] |= 0x00000001u;
}
inline void append_entry_response::clear_has_term() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void append_entry_response::clear_term() {
  term_ = 0;
  clear_has_term();
}
inline ::google::protobuf::int32 append_entry_response::term() const {
  return term_;
}
inline void append_entry_response::set_term(::google::protobuf::int32 value) {
  set_has_term();
  term_ = value;
}

// required .raft_proto.append_entry_response.RESULT_TYPE result = 2 [default = REJECT];
inline bool append_entry_response::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void append_entry_response::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void append_entry_response::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void append_entry_response::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::raft_proto::append_entry_response_RESULT_TYPE append_entry_response::result() const {
  return static_cast< ::raft_proto::append_entry_response_RESULT_TYPE >(result_);
}
inline void append_entry_response::set_result(::raft_proto::append_entry_response_RESULT_TYPE value) {
  assert(::raft_proto::append_entry_response_RESULT_TYPE_IsValid(value));
  set_has_result();
  result_ = value;
}

// optional int32 prev_log_idx = 3;
inline bool append_entry_response::has_prev_log_idx() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void append_entry_response::set_has_prev_log_idx() {
  _has_bits_[0] |= 0x00000004u;
}
inline void append_entry_response::clear_has_prev_log_idx() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void append_entry_response::clear_prev_log_idx() {
  prev_log_idx_ = 0;
  clear_has_prev_log_idx();
}
inline ::google::protobuf::int32 append_entry_response::prev_log_idx() const {
  return prev_log_idx_;
}
inline void append_entry_response::set_prev_log_idx(::google::protobuf::int32 value) {
  set_has_prev_log_idx();
  prev_log_idx_ = value;
}

// optional int32 append_size = 4 [default = 0];
inline bool append_entry_response::has_append_size() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void append_entry_response::set_has_append_size() {
  _has_bits_[0] |= 0x00000008u;
}
inline void append_entry_response::clear_has_append_size() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void append_entry_response::clear_append_size() {
  append_size_ = 0;
  clear_has_append_size();
}
inline ::google::protobuf::int32 append_entry_response::append_size() const {
  return append_size_;
}
inline void append_entry_response::set_append_size(::google::protobuf::int32 value) {
  set_has_append_size();
  append_size_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace raft_proto

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::raft_proto::vote_response_RESULT_TYPE>() {
  return ::raft_proto::vote_response_RESULT_TYPE_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::raft_proto::append_entry_response_RESULT_TYPE>() {
  return ::raft_proto::append_entry_response_RESULT_TYPE_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_raft_2eproto__INCLUDED
