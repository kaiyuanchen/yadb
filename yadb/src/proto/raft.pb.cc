// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: raft.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "raft.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace raft_proto {

namespace {

const ::google::protobuf::Descriptor* vote_request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  vote_request_reflection_ = NULL;
const ::google::protobuf::Descriptor* vote_response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  vote_response_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* vote_response_RESULT_TYPE_descriptor_ = NULL;
const ::google::protobuf::Descriptor* append_entry_requset_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  append_entry_requset_reflection_ = NULL;
const ::google::protobuf::Descriptor* append_entry_requset_entry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  append_entry_requset_entry_reflection_ = NULL;
const ::google::protobuf::Descriptor* append_entry_response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  append_entry_response_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* append_entry_response_RESULT_TYPE_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_raft_2eproto() {
  protobuf_AddDesc_raft_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "raft.proto");
  GOOGLE_CHECK(file != NULL);
  vote_request_descriptor_ = file->message_type(0);
  static const int vote_request_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(vote_request, term_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(vote_request, candidate_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(vote_request, last_log_idx_),
  };
  vote_request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      vote_request_descriptor_,
      vote_request::default_instance_,
      vote_request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(vote_request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(vote_request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(vote_request));
  vote_response_descriptor_ = file->message_type(1);
  static const int vote_response_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(vote_response, term_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(vote_response, result_),
  };
  vote_response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      vote_response_descriptor_,
      vote_response::default_instance_,
      vote_response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(vote_response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(vote_response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(vote_response));
  vote_response_RESULT_TYPE_descriptor_ = vote_response_descriptor_->enum_type(0);
  append_entry_requset_descriptor_ = file->message_type(2);
  static const int append_entry_requset_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(append_entry_requset, term_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(append_entry_requset, leader_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(append_entry_requset, prev_log_idx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(append_entry_requset, prev_log_term_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(append_entry_requset, leader_cmt_idx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(append_entry_requset, etriies_),
  };
  append_entry_requset_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      append_entry_requset_descriptor_,
      append_entry_requset::default_instance_,
      append_entry_requset_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(append_entry_requset, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(append_entry_requset, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(append_entry_requset));
  append_entry_requset_entry_descriptor_ = append_entry_requset_descriptor_->nested_type(0);
  static const int append_entry_requset_entry_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(append_entry_requset_entry, idx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(append_entry_requset_entry, val_),
  };
  append_entry_requset_entry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      append_entry_requset_entry_descriptor_,
      append_entry_requset_entry::default_instance_,
      append_entry_requset_entry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(append_entry_requset_entry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(append_entry_requset_entry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(append_entry_requset_entry));
  append_entry_response_descriptor_ = file->message_type(3);
  static const int append_entry_response_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(append_entry_response, term_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(append_entry_response, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(append_entry_response, prev_log_idx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(append_entry_response, append_size_),
  };
  append_entry_response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      append_entry_response_descriptor_,
      append_entry_response::default_instance_,
      append_entry_response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(append_entry_response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(append_entry_response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(append_entry_response));
  append_entry_response_RESULT_TYPE_descriptor_ = append_entry_response_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_raft_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    vote_request_descriptor_, &vote_request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    vote_response_descriptor_, &vote_response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    append_entry_requset_descriptor_, &append_entry_requset::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    append_entry_requset_entry_descriptor_, &append_entry_requset_entry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    append_entry_response_descriptor_, &append_entry_response::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_raft_2eproto() {
  delete vote_request::default_instance_;
  delete vote_request_reflection_;
  delete vote_response::default_instance_;
  delete vote_response_reflection_;
  delete append_entry_requset::default_instance_;
  delete append_entry_requset_reflection_;
  delete append_entry_requset_entry::default_instance_;
  delete append_entry_requset_entry_reflection_;
  delete append_entry_response::default_instance_;
  delete append_entry_response_reflection_;
}

void protobuf_AddDesc_raft_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\nraft.proto\022\nraft_proto\"H\n\014vote_request"
    "\022\014\n\004term\030\001 \002(\005\022\024\n\014candidate_id\030\002 \002(\005\022\024\n\014"
    "last_log_idx\030\003 \002(\005\"\177\n\rvote_response\022\014\n\004t"
    "erm\030\001 \002(\005\022=\n\006result\030\002 \002(\0162%.raft_proto.v"
    "ote_response.RESULT_TYPE:\006REJECT\"!\n\013RESU"
    "LT_TYPE\022\006\n\002OK\020\000\022\n\n\006REJECT\020\001\"\330\001\n\024append_e"
    "ntry_requset\022\014\n\004term\030\001 \002(\005\022\021\n\tleader_id\030"
    "\002 \002(\005\022\024\n\014prev_log_idx\030\003 \001(\005\022\025\n\rprev_log_"
    "term\030\004 \001(\005\022\026\n\016leader_cmt_idx\030\005 \001(\005\0227\n\007et"
    "riies\030\006 \003(\0132&.raft_proto.append_entry_re"
    "quset.entry\032!\n\005entry\022\013\n\003idx\030\001 \002(\005\022\013\n\003val"
    "\030\002 \002(\t\"\275\001\n\025append_entry_response\022\014\n\004term"
    "\030\001 \002(\005\022E\n\006result\030\002 \002(\0162-.raft_proto.appe"
    "nd_entry_response.RESULT_TYPE:\006REJECT\022\024\n"
    "\014prev_log_idx\030\003 \001(\005\022\026\n\013append_size\030\004 \001(\005"
    ":\0010\"!\n\013RESULT_TYPE\022\006\n\002OK\020\000\022\n\n\006REJECT\020\001", 638);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "raft.proto", &protobuf_RegisterTypes);
  vote_request::default_instance_ = new vote_request();
  vote_response::default_instance_ = new vote_response();
  append_entry_requset::default_instance_ = new append_entry_requset();
  append_entry_requset_entry::default_instance_ = new append_entry_requset_entry();
  append_entry_response::default_instance_ = new append_entry_response();
  vote_request::default_instance_->InitAsDefaultInstance();
  vote_response::default_instance_->InitAsDefaultInstance();
  append_entry_requset::default_instance_->InitAsDefaultInstance();
  append_entry_requset_entry::default_instance_->InitAsDefaultInstance();
  append_entry_response::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_raft_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_raft_2eproto {
  StaticDescriptorInitializer_raft_2eproto() {
    protobuf_AddDesc_raft_2eproto();
  }
} static_descriptor_initializer_raft_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int vote_request::kTermFieldNumber;
const int vote_request::kCandidateIdFieldNumber;
const int vote_request::kLastLogIdxFieldNumber;
#endif  // !_MSC_VER

vote_request::vote_request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void vote_request::InitAsDefaultInstance() {
}

vote_request::vote_request(const vote_request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void vote_request::SharedCtor() {
  _cached_size_ = 0;
  term_ = 0;
  candidate_id_ = 0;
  last_log_idx_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

vote_request::~vote_request() {
  SharedDtor();
}

void vote_request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void vote_request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* vote_request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return vote_request_descriptor_;
}

const vote_request& vote_request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_raft_2eproto();
  return *default_instance_;
}

vote_request* vote_request::default_instance_ = NULL;

vote_request* vote_request::New() const {
  return new vote_request;
}

void vote_request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    term_ = 0;
    candidate_id_ = 0;
    last_log_idx_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool vote_request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 term = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &term_)));
          set_has_term();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_candidate_id;
        break;
      }

      // required int32 candidate_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_candidate_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &candidate_id_)));
          set_has_candidate_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_last_log_idx;
        break;
      }

      // required int32 last_log_idx = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_log_idx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &last_log_idx_)));
          set_has_last_log_idx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void vote_request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 term = 1;
  if (has_term()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->term(), output);
  }

  // required int32 candidate_id = 2;
  if (has_candidate_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->candidate_id(), output);
  }

  // required int32 last_log_idx = 3;
  if (has_last_log_idx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->last_log_idx(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* vote_request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 term = 1;
  if (has_term()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->term(), target);
  }

  // required int32 candidate_id = 2;
  if (has_candidate_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->candidate_id(), target);
  }

  // required int32 last_log_idx = 3;
  if (has_last_log_idx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->last_log_idx(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int vote_request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 term = 1;
    if (has_term()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->term());
    }

    // required int32 candidate_id = 2;
    if (has_candidate_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->candidate_id());
    }

    // required int32 last_log_idx = 3;
    if (has_last_log_idx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->last_log_idx());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void vote_request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const vote_request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const vote_request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void vote_request::MergeFrom(const vote_request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_term()) {
      set_term(from.term());
    }
    if (from.has_candidate_id()) {
      set_candidate_id(from.candidate_id());
    }
    if (from.has_last_log_idx()) {
      set_last_log_idx(from.last_log_idx());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void vote_request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void vote_request::CopyFrom(const vote_request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool vote_request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void vote_request::Swap(vote_request* other) {
  if (other != this) {
    std::swap(term_, other->term_);
    std::swap(candidate_id_, other->candidate_id_);
    std::swap(last_log_idx_, other->last_log_idx_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata vote_request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = vote_request_descriptor_;
  metadata.reflection = vote_request_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* vote_response_RESULT_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return vote_response_RESULT_TYPE_descriptor_;
}
bool vote_response_RESULT_TYPE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const vote_response_RESULT_TYPE vote_response::OK;
const vote_response_RESULT_TYPE vote_response::REJECT;
const vote_response_RESULT_TYPE vote_response::RESULT_TYPE_MIN;
const vote_response_RESULT_TYPE vote_response::RESULT_TYPE_MAX;
const int vote_response::RESULT_TYPE_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int vote_response::kTermFieldNumber;
const int vote_response::kResultFieldNumber;
#endif  // !_MSC_VER

vote_response::vote_response()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void vote_response::InitAsDefaultInstance() {
}

vote_response::vote_response(const vote_response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void vote_response::SharedCtor() {
  _cached_size_ = 0;
  term_ = 0;
  result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

vote_response::~vote_response() {
  SharedDtor();
}

void vote_response::SharedDtor() {
  if (this != default_instance_) {
  }
}

void vote_response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* vote_response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return vote_response_descriptor_;
}

const vote_response& vote_response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_raft_2eproto();
  return *default_instance_;
}

vote_response* vote_response::default_instance_ = NULL;

vote_response* vote_response::New() const {
  return new vote_response;
}

void vote_response::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    term_ = 0;
    result_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool vote_response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 term = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &term_)));
          set_has_term();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // required .raft_proto.vote_response.RESULT_TYPE result = 2 [default = REJECT];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::raft_proto::vote_response_RESULT_TYPE_IsValid(value)) {
            set_result(static_cast< ::raft_proto::vote_response_RESULT_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void vote_response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 term = 1;
  if (has_term()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->term(), output);
  }

  // required .raft_proto.vote_response.RESULT_TYPE result = 2 [default = REJECT];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* vote_response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 term = 1;
  if (has_term()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->term(), target);
  }

  // required .raft_proto.vote_response.RESULT_TYPE result = 2 [default = REJECT];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int vote_response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 term = 1;
    if (has_term()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->term());
    }

    // required .raft_proto.vote_response.RESULT_TYPE result = 2 [default = REJECT];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void vote_response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const vote_response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const vote_response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void vote_response::MergeFrom(const vote_response& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_term()) {
      set_term(from.term());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void vote_response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void vote_response::CopyFrom(const vote_response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool vote_response::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void vote_response::Swap(vote_response* other) {
  if (other != this) {
    std::swap(term_, other->term_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata vote_response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = vote_response_descriptor_;
  metadata.reflection = vote_response_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int append_entry_requset_entry::kIdxFieldNumber;
const int append_entry_requset_entry::kValFieldNumber;
#endif  // !_MSC_VER

append_entry_requset_entry::append_entry_requset_entry()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void append_entry_requset_entry::InitAsDefaultInstance() {
}

append_entry_requset_entry::append_entry_requset_entry(const append_entry_requset_entry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void append_entry_requset_entry::SharedCtor() {
  _cached_size_ = 0;
  idx_ = 0;
  val_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

append_entry_requset_entry::~append_entry_requset_entry() {
  SharedDtor();
}

void append_entry_requset_entry::SharedDtor() {
  if (val_ != &::google::protobuf::internal::kEmptyString) {
    delete val_;
  }
  if (this != default_instance_) {
  }
}

void append_entry_requset_entry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* append_entry_requset_entry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return append_entry_requset_entry_descriptor_;
}

const append_entry_requset_entry& append_entry_requset_entry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_raft_2eproto();
  return *default_instance_;
}

append_entry_requset_entry* append_entry_requset_entry::default_instance_ = NULL;

append_entry_requset_entry* append_entry_requset_entry::New() const {
  return new append_entry_requset_entry;
}

void append_entry_requset_entry::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    idx_ = 0;
    if (has_val()) {
      if (val_ != &::google::protobuf::internal::kEmptyString) {
        val_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool append_entry_requset_entry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 idx = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &idx_)));
          set_has_idx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_val;
        break;
      }

      // required string val = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_val:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_val()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->val().data(), this->val().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void append_entry_requset_entry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 idx = 1;
  if (has_idx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->idx(), output);
  }

  // required string val = 2;
  if (has_val()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->val().data(), this->val().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->val(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* append_entry_requset_entry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 idx = 1;
  if (has_idx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->idx(), target);
  }

  // required string val = 2;
  if (has_val()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->val().data(), this->val().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->val(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int append_entry_requset_entry::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 idx = 1;
    if (has_idx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->idx());
    }

    // required string val = 2;
    if (has_val()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->val());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void append_entry_requset_entry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const append_entry_requset_entry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const append_entry_requset_entry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void append_entry_requset_entry::MergeFrom(const append_entry_requset_entry& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_idx()) {
      set_idx(from.idx());
    }
    if (from.has_val()) {
      set_val(from.val());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void append_entry_requset_entry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void append_entry_requset_entry::CopyFrom(const append_entry_requset_entry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool append_entry_requset_entry::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void append_entry_requset_entry::Swap(append_entry_requset_entry* other) {
  if (other != this) {
    std::swap(idx_, other->idx_);
    std::swap(val_, other->val_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata append_entry_requset_entry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = append_entry_requset_entry_descriptor_;
  metadata.reflection = append_entry_requset_entry_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int append_entry_requset::kTermFieldNumber;
const int append_entry_requset::kLeaderIdFieldNumber;
const int append_entry_requset::kPrevLogIdxFieldNumber;
const int append_entry_requset::kPrevLogTermFieldNumber;
const int append_entry_requset::kLeaderCmtIdxFieldNumber;
const int append_entry_requset::kEtriiesFieldNumber;
#endif  // !_MSC_VER

append_entry_requset::append_entry_requset()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void append_entry_requset::InitAsDefaultInstance() {
}

append_entry_requset::append_entry_requset(const append_entry_requset& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void append_entry_requset::SharedCtor() {
  _cached_size_ = 0;
  term_ = 0;
  leader_id_ = 0;
  prev_log_idx_ = 0;
  prev_log_term_ = 0;
  leader_cmt_idx_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

append_entry_requset::~append_entry_requset() {
  SharedDtor();
}

void append_entry_requset::SharedDtor() {
  if (this != default_instance_) {
  }
}

void append_entry_requset::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* append_entry_requset::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return append_entry_requset_descriptor_;
}

const append_entry_requset& append_entry_requset::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_raft_2eproto();
  return *default_instance_;
}

append_entry_requset* append_entry_requset::default_instance_ = NULL;

append_entry_requset* append_entry_requset::New() const {
  return new append_entry_requset;
}

void append_entry_requset::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    term_ = 0;
    leader_id_ = 0;
    prev_log_idx_ = 0;
    prev_log_term_ = 0;
    leader_cmt_idx_ = 0;
  }
  etriies_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool append_entry_requset::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 term = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &term_)));
          set_has_term();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_leader_id;
        break;
      }

      // required int32 leader_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_leader_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &leader_id_)));
          set_has_leader_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_prev_log_idx;
        break;
      }

      // optional int32 prev_log_idx = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_prev_log_idx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &prev_log_idx_)));
          set_has_prev_log_idx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_prev_log_term;
        break;
      }

      // optional int32 prev_log_term = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_prev_log_term:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &prev_log_term_)));
          set_has_prev_log_term();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_leader_cmt_idx;
        break;
      }

      // optional int32 leader_cmt_idx = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_leader_cmt_idx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &leader_cmt_idx_)));
          set_has_leader_cmt_idx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_etriies;
        break;
      }

      // repeated .raft_proto.append_entry_requset.entry etriies = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_etriies:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_etriies()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_etriies;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void append_entry_requset::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 term = 1;
  if (has_term()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->term(), output);
  }

  // required int32 leader_id = 2;
  if (has_leader_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->leader_id(), output);
  }

  // optional int32 prev_log_idx = 3;
  if (has_prev_log_idx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->prev_log_idx(), output);
  }

  // optional int32 prev_log_term = 4;
  if (has_prev_log_term()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->prev_log_term(), output);
  }

  // optional int32 leader_cmt_idx = 5;
  if (has_leader_cmt_idx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->leader_cmt_idx(), output);
  }

  // repeated .raft_proto.append_entry_requset.entry etriies = 6;
  for (int i = 0; i < this->etriies_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->etriies(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* append_entry_requset::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 term = 1;
  if (has_term()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->term(), target);
  }

  // required int32 leader_id = 2;
  if (has_leader_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->leader_id(), target);
  }

  // optional int32 prev_log_idx = 3;
  if (has_prev_log_idx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->prev_log_idx(), target);
  }

  // optional int32 prev_log_term = 4;
  if (has_prev_log_term()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->prev_log_term(), target);
  }

  // optional int32 leader_cmt_idx = 5;
  if (has_leader_cmt_idx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->leader_cmt_idx(), target);
  }

  // repeated .raft_proto.append_entry_requset.entry etriies = 6;
  for (int i = 0; i < this->etriies_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->etriies(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int append_entry_requset::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 term = 1;
    if (has_term()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->term());
    }

    // required int32 leader_id = 2;
    if (has_leader_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->leader_id());
    }

    // optional int32 prev_log_idx = 3;
    if (has_prev_log_idx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->prev_log_idx());
    }

    // optional int32 prev_log_term = 4;
    if (has_prev_log_term()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->prev_log_term());
    }

    // optional int32 leader_cmt_idx = 5;
    if (has_leader_cmt_idx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->leader_cmt_idx());
    }

  }
  // repeated .raft_proto.append_entry_requset.entry etriies = 6;
  total_size += 1 * this->etriies_size();
  for (int i = 0; i < this->etriies_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->etriies(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void append_entry_requset::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const append_entry_requset* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const append_entry_requset*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void append_entry_requset::MergeFrom(const append_entry_requset& from) {
  GOOGLE_CHECK_NE(&from, this);
  etriies_.MergeFrom(from.etriies_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_term()) {
      set_term(from.term());
    }
    if (from.has_leader_id()) {
      set_leader_id(from.leader_id());
    }
    if (from.has_prev_log_idx()) {
      set_prev_log_idx(from.prev_log_idx());
    }
    if (from.has_prev_log_term()) {
      set_prev_log_term(from.prev_log_term());
    }
    if (from.has_leader_cmt_idx()) {
      set_leader_cmt_idx(from.leader_cmt_idx());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void append_entry_requset::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void append_entry_requset::CopyFrom(const append_entry_requset& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool append_entry_requset::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  for (int i = 0; i < etriies_size(); i++) {
    if (!this->etriies(i).IsInitialized()) return false;
  }
  return true;
}

void append_entry_requset::Swap(append_entry_requset* other) {
  if (other != this) {
    std::swap(term_, other->term_);
    std::swap(leader_id_, other->leader_id_);
    std::swap(prev_log_idx_, other->prev_log_idx_);
    std::swap(prev_log_term_, other->prev_log_term_);
    std::swap(leader_cmt_idx_, other->leader_cmt_idx_);
    etriies_.Swap(&other->etriies_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata append_entry_requset::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = append_entry_requset_descriptor_;
  metadata.reflection = append_entry_requset_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* append_entry_response_RESULT_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return append_entry_response_RESULT_TYPE_descriptor_;
}
bool append_entry_response_RESULT_TYPE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const append_entry_response_RESULT_TYPE append_entry_response::OK;
const append_entry_response_RESULT_TYPE append_entry_response::REJECT;
const append_entry_response_RESULT_TYPE append_entry_response::RESULT_TYPE_MIN;
const append_entry_response_RESULT_TYPE append_entry_response::RESULT_TYPE_MAX;
const int append_entry_response::RESULT_TYPE_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int append_entry_response::kTermFieldNumber;
const int append_entry_response::kResultFieldNumber;
const int append_entry_response::kPrevLogIdxFieldNumber;
const int append_entry_response::kAppendSizeFieldNumber;
#endif  // !_MSC_VER

append_entry_response::append_entry_response()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void append_entry_response::InitAsDefaultInstance() {
}

append_entry_response::append_entry_response(const append_entry_response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void append_entry_response::SharedCtor() {
  _cached_size_ = 0;
  term_ = 0;
  result_ = 1;
  prev_log_idx_ = 0;
  append_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

append_entry_response::~append_entry_response() {
  SharedDtor();
}

void append_entry_response::SharedDtor() {
  if (this != default_instance_) {
  }
}

void append_entry_response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* append_entry_response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return append_entry_response_descriptor_;
}

const append_entry_response& append_entry_response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_raft_2eproto();
  return *default_instance_;
}

append_entry_response* append_entry_response::default_instance_ = NULL;

append_entry_response* append_entry_response::New() const {
  return new append_entry_response;
}

void append_entry_response::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    term_ = 0;
    result_ = 1;
    prev_log_idx_ = 0;
    append_size_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool append_entry_response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 term = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &term_)));
          set_has_term();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // required .raft_proto.append_entry_response.RESULT_TYPE result = 2 [default = REJECT];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::raft_proto::append_entry_response_RESULT_TYPE_IsValid(value)) {
            set_result(static_cast< ::raft_proto::append_entry_response_RESULT_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_prev_log_idx;
        break;
      }

      // optional int32 prev_log_idx = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_prev_log_idx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &prev_log_idx_)));
          set_has_prev_log_idx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_append_size;
        break;
      }

      // optional int32 append_size = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_append_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &append_size_)));
          set_has_append_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void append_entry_response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 term = 1;
  if (has_term()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->term(), output);
  }

  // required .raft_proto.append_entry_response.RESULT_TYPE result = 2 [default = REJECT];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->result(), output);
  }

  // optional int32 prev_log_idx = 3;
  if (has_prev_log_idx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->prev_log_idx(), output);
  }

  // optional int32 append_size = 4 [default = 0];
  if (has_append_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->append_size(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* append_entry_response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 term = 1;
  if (has_term()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->term(), target);
  }

  // required .raft_proto.append_entry_response.RESULT_TYPE result = 2 [default = REJECT];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->result(), target);
  }

  // optional int32 prev_log_idx = 3;
  if (has_prev_log_idx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->prev_log_idx(), target);
  }

  // optional int32 append_size = 4 [default = 0];
  if (has_append_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->append_size(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int append_entry_response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 term = 1;
    if (has_term()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->term());
    }

    // required .raft_proto.append_entry_response.RESULT_TYPE result = 2 [default = REJECT];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional int32 prev_log_idx = 3;
    if (has_prev_log_idx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->prev_log_idx());
    }

    // optional int32 append_size = 4 [default = 0];
    if (has_append_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->append_size());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void append_entry_response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const append_entry_response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const append_entry_response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void append_entry_response::MergeFrom(const append_entry_response& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_term()) {
      set_term(from.term());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_prev_log_idx()) {
      set_prev_log_idx(from.prev_log_idx());
    }
    if (from.has_append_size()) {
      set_append_size(from.append_size());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void append_entry_response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void append_entry_response::CopyFrom(const append_entry_response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool append_entry_response::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void append_entry_response::Swap(append_entry_response* other) {
  if (other != this) {
    std::swap(term_, other->term_);
    std::swap(result_, other->result_);
    std::swap(prev_log_idx_, other->prev_log_idx_);
    std::swap(append_size_, other->append_size_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata append_entry_response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = append_entry_response_descriptor_;
  metadata.reflection = append_entry_response_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace raft_proto

// @@protoc_insertion_point(global_scope)
